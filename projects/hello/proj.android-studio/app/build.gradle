import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion "28.0.3"

    defaultConfig {
        applicationId "org.cocos.hello"
        minSdkVersion 10
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            if (PROP_BUILD_TYPE == 'ndk-build') {
                ndkBuild {
                    targets 'cocos2dcpp'
                    // arguments 'NDK_TOOLCHAIN_VERSION=clang'
                    // arguments '-j' + Runtime.runtime.availableProcessors()
                    //
                    arguments 'NDK_TOOLCHAIN_VERSION=4.9'
                    // arguments 'APP_PLATFORM=android-'+PROP_APP_PLATFORM

                    def module_paths = [
                                        project.file("../../../..").absolutePath,
                                        project.file("../../../../cocos2dx").absolutePath,
                                        project.file("../../../../cocos2dx/platform/third_party/android/prebuilt").absolutePath,
                                        project.file("../../../../external").absolutePath,
                                        project.file("../../../../extensions").absolutePath,
                                        project.file("../../../../CocosDenshion/android").absolutePath

                                        // project.file("../../../../").absolutePath,
                                        // project.file("../../cocos2d/cocos").absolutePath,
                                        // project.file("../../cocos2d/external").absolutePath
                                        ]
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        // should use '/'
                        module_paths = module_paths.collect {it.replaceAll('\\\\', '/')}
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    }
                    else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }
                }
            }
            // else if (PROP_BUILD_TYPE == 'cmake') {
            //     cmake {
            //         targets 'MyGame'
            //         arguments "-DCMAKE_FIND_ROOT_PATH=", "-DANDROID_STL=c++_static", "-DANDROID_TOOLCHAIN=clang", "-DANDROID_ARM_NEON=TRUE", \
            //                   "-DUSE_CHIPMUNK=TRUE", "-DUSE_BULLET=TRUE"
            //         cppFlags "-frtti -fexceptions"
            //         // prebuilt root must be defined as a directory which you have right to access or create if you use prebuilt
            //         // set "-DGEN_COCOS_PREBUILT=ON" and "-DUSE_COCOS_PREBUILT=OFF" to generate prebuilt,  this way build cocos2d-x libs
            //         // set "-DGEN_COCOS_PREBUILT=OFF" and "-DUSE_COCOS_PREBUILT=ON" to use prebuilt, this way not build cocos2d-x libs
            //         //arguments "-DCOCOS_PREBUILT_ROOT=/Users/laptop/cocos-prebuilt"
            //         //arguments "-DGEN_COCOS_PREBUILT=OFF", "-DUSE_COCOS_PREBUILT=OFF"
            //     }
            // }
        }

        ndk {
            abiFilters = []
            abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
        }
    }

    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        jniLibs.srcDir "libs"
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDir "assets"
    }

    externalNativeBuild {
        if (PROP_BUILD_TYPE == 'ndk-build') {
            ndkBuild {
                path "jni/Android.mk"
            }
        }
        // else if (PROP_BUILD_TYPE == 'cmake') {
        //     cmake {
        //         path "../../CMakeLists.txt"
        //     }
        // }
    }

    signingConfigs {

       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            debuggable true
            jniDebuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }
        }

        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':libcocos2dx')
}

task cleanAssets(type: Delete) {
    delete 'assets'
}
task copyAssets(type: Copy) {
    from '../../Resources'
    into 'assets'
}

clean.dependsOn cleanAssets
preBuild.dependsOn copyAssets
